version: "3.6"

networks:
  frontend:
    driver: overlay
  backend:
    driver: overlay

volumes:
  public_code:
    driver: local
  public_config:
    driver: local

services:
  workspace:
    image: hellocr/microservice:workspace-latest
    environment:
      - APP_RUN_PUID=${APP_RUN_PUID}
      - APP_RUN_PGID=${APP_RUN_PGID}
      - APP_RUN_NAME=${APP_RUN_NAME}
      - APP_RUN_GROUP=${APP_RUN_GROUP}
    volumes:
      - ${LOCAL_CODE_PATH}:${CONTAINER_CODE_PATH}
      - ${LOCAL_DOCKER_PATH}/workspace/${RUN_ENV}:${WORKSPACE_CONFIG}
    networks:
      - backend
    deploy:
      replicas: ${DEPLOY_REPLICAS}
      update_config:
        parallelism: ${DEPLOY_UPDATE_PARALLELISM}
    tty: true
  nginx:
    image: hellocr/microservice:nginx-latest
    environment:
      - APP_RUN_PUID=${APP_RUN_PUID}
      - APP_RUN_PGID=${APP_RUN_PGID}
      - APP_RUN_NAME=${APP_RUN_NAME}
      - APP_RUN_GROUP=${APP_RUN_GROUP}
    volumes:
      - ${LOCAL_CODE_PATH}:${CONTAINER_CODE_PATH}
      - ${LOCAL_DOCKER_PATH}/nginx/${RUN_ENV}:${NGINX_CONFIG}
    networks:
      - frontend
      - backend
    deploy:
      replicas: ${DEPLOY_REPLICAS}
      update_config:
        parallelism: ${DEPLOY_UPDATE_PARALLELISM}
    depends_on:
      - php-fpm
    ports:
      - ${NGINX_HTTP_PORT}:80
      - ${NGINX_SSL_PORT}:443
#    ports:
#      - mode: host
#        protocol: tcp
#        published: ${NGINX_HTTP_PORT}
#        target: 80
#      - mode: host
#        protocol: tcp
#        published: ${NGINX_SSL_PORT}
#        target: 443
  php-fpm:
    image: hellocr/microservice:php-fpm-latest
    environment:
      - APP_RUN_PUID=${APP_RUN_PUID}
      - APP_RUN_PGID=${APP_RUN_PGID}
      - APP_RUN_NAME=${APP_RUN_NAME}
      - APP_RUN_GROUP=${APP_RUN_GROUP}
    volumes:
      - ${LOCAL_CODE_PATH}:${CONTAINER_CODE_PATH}
      - ${LOCAL_DOCKER_PATH}/php-fpm/${RUN_ENV}:${PHP_FPM_CONFIG}
    networks:
      - frontend
      - backend
    deploy:
      replicas: ${DEPLOY_REPLICAS}
      update_config:
        parallelism: ${DEPLOY_UPDATE_PARALLELISM}
  mysql:
    build:
      context: hellocr/microservice:mysql-latest
      args:
        - ARG_TIMEZONE=${TIMEZONE}
        - ARG_RUN_ENV=${RUN_ENV}
    environment:
      - MYSQL_ROOT_PASSWORD=${MYSQL_ROOT_PASSWORD}
      - MYSQL_REPLICATION_USER=${MYSQL_REPLICATION_USER}
      - MYSQL_REPLICATION_PASSWORD=${MYSQL_REPLICATION_PASSWORD}
    volumes:
      - mysql-db:/var/lib/mysql
      - ${LOCAL_DOCKER_PATH}/mysql/${RUN_ENV}:/etc/mysql/conf.d
      - ${LOCAL_DOCKER_PATH}/mysql/init-sh-sql:/docker-entrypoint-initdb.d
    ports:
      - ${MYSQL_PORT}:3306
    networks:
      - backend
    deploy:
      replicas: 1
  # 注意主从配置是无法通过secrets使用MYSQL_ROOT_PASSWORD_FILE来设置的
  # 因为优先执行了/docker-entrypoint-initdb.d，此时默认的MYSQL_ROOT_PASSWORD_FILE root密码还未设置
  mysql-slave:
    build:
      context: hellocr/microservice:mysql-latest
      args:
        - ARG_TIMEZONE=${TIMEZONE}
        - ARG_RUN_ENV=${RUN_ENV}
    environment:
      - MYSQL_SLAVE_DELAY=${MYSQL_SLAVE_DELAY}
      - MYSQL_ROOT_PASSWORD=${MYSQL_ROOT_PASSWORD}
      - MYSQL_REPLICATION_USER=${MYSQL_REPLICATION_USER}
      - MYSQL_REPLICATION_PASSWORD=${MYSQL_REPLICATION_PASSWORD}
    volumes:
      - mysql-slave-db:/var/lib/mysql
      - ${LOCAL_DOCKER_PATH}/mysql/slave/${RUN_ENV}:/etc/mysql/conf.d
      - ${LOCAL_DOCKER_PATH}/mysql/slave/init-sh-sql:/docker-entrypoint-initdb.d
    ports:
      - ${MYSQL_SLAVE_PORT}:3306
    networks:
      - backend
    depends_on:
      - mysql
    deploy:
      replicas: ${DEPLOY_REPLICAS}
      update_config:
        parallelism: ${DEPLOY_UPDATE_PARALLELISM}