version: "3.6"

networks:
  frontend:
    driver: ${NETWORKS_DRIVER}
  backend:
    driver: ${NETWORKS_DRIVER}

volumes:
  public:
    driver: ${VOLUME_DRIVER}
  mongo-db:
    driver: ${VOLUME_DRIVER}
  mongo-configdb:
    driver: ${VOLUME_DRIVER}
  mysql-db:
    driver: ${VOLUME_DRIVER}
  mysql-slave-db:
    driver: ${VOLUME_DRIVER}

services:
  workspace:
    build:
      context: ${LOCAL_DOCKER_PATH}/workspace
      args:
        - ARG_CONTAINER_CODE_PATH=${CONTAINER_CODE_PATH}
        - ARG_WORKSPACE_INSTALL_SWOOLE=${WORKSPACE_INSTALL_SWOOLE}
        - ARG_WORKSPACE_INSTALL_MONGODB=${WORKSPACE_INSTALL_MONGODB}
        - ARG_WORKSPACE_INSTALL_REDIS=${WORKSPACE_INSTALL_REDIS}
        - ARG_APP_RUN_PUID=${APP_RUN_PUID}
        - ARG_APP_RUN_PGID=${APP_RUN_PGID}
        - ARG_APP_RUN_NAME=${APP_RUN_NAME}
        - ARG_APP_RUN_GROUP=${APP_RUN_GROUP}
        - ARG_TIMEZONE=${TIMEZONE}
        - ARG_WORKSPACE_INSTALL_NPM=${WORKSPACE_INSTALL_NPM}
        - ARG_WORKSPACE_INSTALL_CRONTAB=${WORKSPACE_INSTALL_CRONTAB}
        - ARG_WORKSPACE_INSTALL_SUPERVISOR=${WORKSPACE_INSTALL_SUPERVISOR}
        - ARG_WORKSPACE_CONFIG=${WORKSPACE_CONFIG}
        - ARG_WORKSPACE_DATA=${WORKSPACE_DATA}
        - ARG_RUN_ENV=${RUN_ENV}
    volumes:
      - ${LOCAL_CODE_PATH}:${CONTAINER_CODE_PATH}
      - ${LOCAL_DOCKER_PATH}/workspace/${RUN_ENV}:${WORKSPACE_CONFIG}
#    ports:
#      - ${WORKSPACE_SWOOLE_PORT}:28080
    networks:
      - backend
    tty: true
#  consul:
#    build:
#      context: ${LOCAL_DOCKER_PATH}/consul
#      args:
#        - ARG_CONSUL_CONFIG=${CONSUL_CONFIG}
#        - ARG_CONSUL_DATA=${CONSUL_DATA}
#    volumes:
#      - ${LOCAL_DOCKER_PATH}/consul/config:/${CONSUL_CONFIG}
#      - ${LOCAL_CODE_PATH}/storage/consul:/${CONSUL_DATA}
#    ports:
#      - "127.0.0.1:8500:8500"
#    networks:
#      - frontend
#      - backend
  nginx:
    build:
      context: ${LOCAL_DOCKER_PATH}/nginx
      args:
        - ARG_CONTAINER_CODE_PATH=${CONTAINER_CODE_PATH}
        - ARG_APP_RUN_PUID=${APP_RUN_PUID}
        - ARG_APP_RUN_PGID=${APP_RUN_PGID}
        - ARG_APP_RUN_NAME=${APP_RUN_NAME}
        - ARG_APP_RUN_GROUP=${APP_RUN_GROUP}
        - ARG_TIMEZONE=${TIMEZONE}
        - ARG_NGINX_CONFIG=${NGINX_CONFIG}
        - ARG_RUN_ENV=${RUN_ENV}
    volumes:
      - ${LOCAL_CODE_PATH}:${CONTAINER_CODE_PATH}
      - ${LOCAL_DOCKER_PATH}/nginx/${RUN_ENV}:${NGINX_CONFIG}
    ports:
      - ${NGINX_HTTP_PORT}:80
      - ${NGINX_SSL_PORT}:443
    networks:
      - frontend
      - backend
    depends_on:
      - php-fpm
  php-fpm:
    build:
      context: ${LOCAL_DOCKER_PATH}/php-fpm
      args:
        - ARG_CONTAINER_CODE_PATH=${CONTAINER_CODE_PATH}
        - ARG_PHP_FPM_INSTALL_MONGODB=${PHP_FPM_INSTALL_MONGODB}
        - ARG_PHP_FPM_INSTALL_REDIS=${PHP_FPM_INSTALL_REDIS}
        - ARG_APP_RUN_PUID=${APP_RUN_PUID}
        - ARG_APP_RUN_PGID=${APP_RUN_PGID}
        - ARG_APP_RUN_NAME=${APP_RUN_NAME}
        - ARG_APP_RUN_GROUP=${APP_RUN_GROUP}
        - ARG_TIMEZONE=${TIMEZONE}
        - ARG_RUN_ENV=${RUN_ENV}
        - ARG_PHP_FPM_CONFIG=${PHP_FPM_CONFIG}
    volumes:
      - ${LOCAL_CODE_PATH}:${CONTAINER_CODE_PATH}
      - ${LOCAL_DOCKER_PATH}/php-fpm/${RUN_ENV}:${PHP_FPM_CONFIG}
    networks:
      - frontend
      - backend
    depends_on:
      - workspace
  mysql:
    build:
      context: ${LOCAL_DOCKER_PATH}/mysql
      args:
        - ARG_TIMEZONE=${TIMEZONE}
        - ARG_RUN_ENV=${RUN_ENV}
    environment:
      - MYSQL_ROOT_PASSWORD=${MYSQL_ROOT_PASSWORD}
      - MYSQL_REPLICATION_USER=${MYSQL_REPLICATION_USER}
      - MYSQL_REPLICATION_PASSWORD=${MYSQL_REPLICATION_PASSWORD}
    volumes:
      - mysql-db:/var/lib/mysql
      - ${LOCAL_DOCKER_PATH}/mysql/${RUN_ENV}:/etc/mysql/conf.d
      - ${LOCAL_DOCKER_PATH}/mysql/init-sh-sql:/docker-entrypoint-initdb.d
    ports:
      - ${MYSQL_PORT}:3306
    networks:
      - backend
  # 注意主从配置是无法通过secrets使用MYSQL_ROOT_PASSWORD_FILE来设置的
  # 因为优先执行了/docker-entrypoint-initdb.d，此时默认的MYSQL_ROOT_PASSWORD_FILE root密码还未设置
  mysql-slave:
    build:
      context: ${LOCAL_DOCKER_PATH}/mysql
      args:
        - ARG_TIMEZONE=${TIMEZONE}
        - ARG_RUN_ENV=${RUN_ENV}
    environment:
      - MYSQL_SLAVE_DELAY=${MYSQL_SLAVE_DELAY}
      - MYSQL_ROOT_PASSWORD=${MYSQL_ROOT_PASSWORD}
      - MYSQL_REPLICATION_USER=${MYSQL_REPLICATION_USER}
      - MYSQL_REPLICATION_PASSWORD=${MYSQL_REPLICATION_PASSWORD}
    volumes:
      - mysql-slave-db:/var/lib/mysql
      - ${LOCAL_DOCKER_PATH}/mysql/slave/${RUN_ENV}:/etc/mysql/conf.d
      - ${LOCAL_DOCKER_PATH}/mysql/slave/init-sh-sql:/docker-entrypoint-initdb.d
    ports:
      - ${MYSQL_SLAVE_PORT}:3306
    networks:
      - backend
    depends_on:
      - mysql
  mongo:
    build:
      context: ${LOCAL_DOCKER_PATH}/mongo
      args:
        - ARG_TIMEZONE=${TIMEZONE}
        - ARG_RUN_ENV=${RUN_ENV}
        - ARG_MONGO_CONFIG=${MONGO_CONFIG}
    volumes:
      - mongo-db:/data/db
      - mongo-configdb:/data/configdb
      - ${LOCAL_DOCKER_PATH}/mongo/${RUN_ENV}:${MONGO_CONFIG}
    ports:
      - ${MONGO_PORT}:27017
    networks:
      - backend